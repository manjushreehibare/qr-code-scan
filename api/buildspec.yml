version: 0.2

env:
  parameter-store:
    USERNAME: USERNAME
    PASSWORD: PASSWORD

phases:
  install:
    runtime-versions:
      python: 3.10
    commands:
      - echo "Installing dependencies..."
      # You can add any necessary dependency installations here

  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - cd qr-code-scan/api  # Navigate to the 'api' directory where the Dockerfile is located
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - echo "Repository URI: $REPOSITORY_URI"

  build:
    commands:
      - echo "Build started on $(date)"
      - echo "Building the Docker image..."
      - docker build -t $IMAGE_REPO_NAME:latest .  # Build the Docker image from the current directory (assumes Dockerfile is in /api)
      - docker tag $IMAGE_REPO_NAME:latest $REPOSITORY_URI:$IMAGE_TAG  # Tag the image with the correct repository URI and image tag

  post_build:
    commands:
      - echo "Build completed on $(date)"
      - echo "Pushing the Docker image..."
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo "Writing image definitions file..."
      - echo '[{"name":"calculator-task","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json

artifacts:
  files:
    - 'imagedefinitions.json'  # This file contains the image information needed for ECS deployments
  discard-paths: yes  # Discards the paths, so only the file(s) are stored in the artifact
